# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - README.md
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - README.md
  workflow_dispatch:


permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Adjust permissions for Gradle
        run: chmod +x gradlew
      - name: Test with gradle
        run: ./gradlew test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:

      - name: Send Telegram Notification User Wants to merge
        run: |
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          echo "Commit author: $COMMIT_AUTHOR"
          # Получаем имя пользователя, который делает мердж
          USER= ${{ github.event.pull_request.user.login }}
          MESSAGE="Пользователь %0A$COMMIT_AUTHOR%0A  начинает мердж в мастер ${{ github.server_url }}/${{ github.repository }}/commits/master"
          curl -X POST \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.CHAT_ID }} \
            -d text="$MESSAGE"

      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Adjust permissions for Gradle Wrapper
        run: chmod +x gradlew
      - name: Set Project Version
        run: |
          echo "PROJECT_VERSION=$(grep -Po "version = '\K[^']+" build.gradle)" >> $GITHUB_ENV
      - name: Build with Gradle and Rename JAR
        run: |
          ./gradlew build
          mv build/libs/*-$PROJECT_VERSION.jar build/libs/app.jar
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      - name: Create .env file
        run: |
          echo "JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}" >> .env
          echo "SPRING_DATA_REDIS_PASSWORD=${{ secrets.SPRING_DATA_REDIS_PASSWORD }}" >> .env
          echo "REDIS_PASS=${{ secrets.REDIS_PASS }}" >> .env
          echo "PG_DB=${{ secrets.PG_DB }}" >> .env
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASS=${{ secrets.PG_PASS }}" >> .env
          echo "PROJECT_VERSION=${{ env.PROJECT_VERSION }}" >> .env
          # Поскольку PROJECT_VERSION добавляется вручную, этот шаг не требуется
          echo "PROJECT_VERSION=0.1.19-SNAPSHOT-TEST" >> .env
      - name: Build and Push Docker Image
        run: |
          docker-compose build
          docker tag checkpoint-manager:$PROJECT_VERSION aasurov/anvilcoder:checkpoint-manager-$PROJECT_VERSION
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u aasurov --password-stdin
          docker push aasurov/anvilcoder:checkpoint-manager-$PROJECT_VERSION
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Deploy to Server
        run: |
          scp .env docker-compose.prod.yml Dockerfile deploy.sh build/libs/app.jar nginx.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker-compose --env-file .env -f docker-compose.prod.yml pull && docker-compose --env-file .env -f docker-compose.prod.yml up -d"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "bash deploy.sh"
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

      - name: Sleep for 120 seconds
        if: success()
        run: sleep 120s
        shell: bash

      - name: Send Telegram Notification
        if: success()
        run: |
          # Получаем заголовки последних 5 коммитов
          COMMITS=$(git log -5 --pretty=format:"%h - %s")
          MESSAGE="Произведен мерж в мастер:%0A$COMMITS%0AПроверьте изменения на GitHub: ${{ github.server_url }}/${{ github.repository }}/commits/master"
          curl -X POST \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.CHAT_ID }} \
            -d text="$MESSAGE"
          
          
          
      
