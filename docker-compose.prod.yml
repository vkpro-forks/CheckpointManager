version: '3'

services:
  # Сервис для приложения Spring Boot
  spring-app:
    image: aasurov/anvilcoder:checkpoint-manager-${PROJECT_VERSION}
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
      - avatars-storage
      - redis-cache
    volumes:
      - logs:/path/to/remote/logs # Использование именованного тома для логов
    environment:
      - LOGGING_CONFIG=classpath:logback-prod-docker.xml
      - LOG_PATH=/path/to/remote/logs
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${PG_DB}
      - SPRING_DATASOURCE_USERNAME=${PG_USER}
      - SPRING_DATASOURCE_PASSWORD=${PG_PASS}
      - SPRING_DATA_REDIS_HOST=redis-cache
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASS}
      - AVATAR_STORAGE_PATH=/avatars
      - TZ=UTC
    env_file:
      - .env
    networks:
      - my_network

  # Сервис для базы данных PostgreSQL
  postgres-db:
    build:
      context: .
      dockerfile: config/postgres/Dockerfile-setup-postgres
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - TZ=UTC

      # https://github.com/citusdata/pg_cron
      - CRON_SCHEDULE_CLEAR=TRUNCATE cron.job; #Удаление предыдущих задач
      - CRON_SCHEDULE_TASK=SELECT cron.schedule('Delete logs','55 23 * * *', 'DELETE FROM logs WHERE time < now() - interval ''1 day'''); #Настройка задач по крону
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  #Сервис для кеширования в Redis
  redis-cache:
    container_name: redis-cache
    hostname: redis-cache
    image: redis:latest
    ports:
      - "6379:6379"
    restart: on-failure
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf #copy config to redis
      - redis-cache-data:/data
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASS} #start with our config
    networks:
      - my_network


  # Сервис для хранения аватаров
  avatars-storage:
    image: nginx:latest
    volumes:
      - avatars:/usr/share/nginx/html:ro # Использование именованного тома для аватаров
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Монтирование конфигурационного файла nginx
      - logs:/var/log/nginx # Путь к логам nginx внутри контейнера
    ports:
      - "8081:80"
    environment:
      - TZ=UTC
    networks:
      - my_network

volumes:
  avatars: # Определение именованного тома для аватаров
  logs: # Определение именованного тома для логов
  db-data: # Определение именованного тома для базы данных
  redis-cache-data: # Вольюм для редиса, откуда он сюда подставится?

networks:
  my_network:
    external: true
